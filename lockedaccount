---
hip: xxxxx
title: Locked Accounts
author: 
type: Standard
needs-council-approval: No
status: Active
discussions-to:
last-call-date-time: 
created: 2023-02-10

---

## Abstract

This HIP specifies a mechanism for locking up HBARs into an account such that those HBARs can be used only for rent payments for both the account and other state 
entities that designate the locked account as their autoRenewalAccount. By eliminating the possibility of a CryptoTransfer removing HBARs from a locked account 
and guaranteeing that any HBARs in the account be used only for rent payments, a locked account sends a strong signal of 'economic immutability' and so can engender 
confidence in the persistence and valuation of the state entities that rely on the locked account for rent payments.

## Motivation

The Sustainability ecosystem building on Hedera creates provenance chains between HTS tokens representing ecological benefits like carbon removal or renewable energy 
credits and the physical reporting data that justifies the minting of the NFT instance. An enterprise considering buying such a carbon credit in order to offset 
their own carbon emissions must be confident that they will be able to subsequently sell or 'retire' that NFT. 

If the token class for the NFT is deleted due to rent failure, then the ability to transfer any extant token instances will inevitably be impacted (details TBD). The
possibility of a token owner being unable to transfer theie carbon credit NFTs to a marketplace for sale, or to a smart contract for retirement, will negatively 
impact the value of their tokens.  All else being equal, an NFT for which the parent token class is at risk of rent deletion will be less valuable than one whose 
parent token class has rent visibly covered for a predictable period of time.


## Rationale

With Hedera turning on 'rent' for state entities like accounts, tokens, topics, and contracts , there is the (albeit likely small) potential for those objects to be
removed from state if rent is not paid. While mechanisms like stake rewards, token royalties, and contract fees can trickle HBARs into an account in order
to fund rent payments for both the account and connected state entities - nothing would prevent the owner of that account using their private key to transfer
those HBARs out of the account - and so effectively preventing future rent payments. 

Even just the possibility of rent payment failure and consequent state deletion may negatively impact the assurance and valuation that participants ascribe to 
Hedera state entities. 

There is therefore value in being able to guarantee rent coverage for state entities and to do so in a public & transparent manner such that participants can more 
easily assess the risk of rent deletion. Strictly speaking, it is impossible to guarantee that the rent for a state entity will be covered by a certain number of HBARs in  

A locked account , one with no private key and so no ability to transfer HBARs, would provide such a rent guarantee for the other state entities that designate the
locked account for renewal. Strictly speaking, it is impossible to guarantee that the rent for a state entity will be covered by a given number of HBARs in an account, even if
those HBARs can only be used for rent- the Governing Council could decide to raise the rent, or the balance could be reduced by rent payments for other entities. 
Nevertheless, eliminating the possibility of explicit transfers out of the account will create confidence that future rent will be funded.

## Specification

If an account has no public key, and so no associated private key, it would be unable to sign the transaction, either create or update, that designated the
account as the autoRenewalAccount for some other state entity.

Consequently, an account must be created with a key pair. After the account has used the private key to approve acting as autoRenewalAccount for other entities, it 
will be updated to remove the key pair.

## Backwards Compatibility

It is optional to update an account to remove any existing key. Existing accounts that have key(s) will not be impacted.

## Security Implications

Like a normal account, a locked account will be deleted if and when it is unable to pay its own rent. Similarly, any other state entity that points at  will face deletion if the locked 
account has insufficient HBARs to cover the rent of that entity. Consequently, locked accounts create no risk of a Denial of Service attack against the network's 
storage capacity.

A locked account can be staked like any other.

## How to Teach This

A locked accounnt can have HBARs transferred in but can only be transferred out for rent payments.

## Rejected Ideas

As an alternative to an account with no keys, an account could have a 'rentOnly' flag. If set to true , the nodes would no longer accept a CryptoTransfer 
transactions that reduced the balance of the account.

It's conceivable that the network could enforce a minimum balance of HBARs on a locked account and so increase the chances of rent being covered. But, such a mechanism 
presumes that their would be some loss of functionality unless that minimum threshold were met, e.g. no transfers would be possible from the account until the minimum 
were satisfied. But of course, the premise of a locked account is that the ability to transfer HBARs out is already removed.

## Open Issues

N/A

## References


## Copyright/license

This document is licensed under the Apache License, Version 2.0 -- see [LICENSE](../LICENSE) or (https://www.apache.org/licenses/LICENSE-2.0)
s
